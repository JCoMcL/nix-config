{ config, lib, pkgs, ... }:


with lib;

let
  cfg = config.services.games.minecraft;

  configFile = _text: {
    user="minecraft";
    group="minecraft";
    text=_text;
  };

  papermcPkg = version:
  if version == "1.17.1" then
    pkgs.papermc
  else if version == "1.18.1" then
    pkgs.callPackage ./pkg/papermc {
      mcVer = version;
      buildNo = "97";
      sha256 = "sha256:0a1gm84rjnk0wv4czcmmk2693f8ja2m5dxx4av2v5p78vr89gdsz";
    }
  else if version == "1.18.2" then
    pkgs.callPackage ./pkg/papermc {
      mcVer = version;
      buildNo = "318";
      sha256 = "sha256:13wb1h4kvq96mld2zcagl28i2dg1lvz7kbqn97m3y6bqjs2hdadl";
    }
  else
    pkgs.papermc;

in {
  options.services.games.minecraft = {

    enable = mkOption {
      type = types.bool;
      default = false;
    };

    agreeToEULA = mkOption {
      type = types.bool;
      default = false;
    };

    dataDir = mkOption {
      type = types.path;
      default = "/var/games/minecraft";
      description = ''
        Directory to store Minecraft database and other state/data files.
      '';
    };

    openFirewall = mkOption {
      type = types.bool;
      default = false;
      description = ''
        Whether to open ports in the firewall for the server.
      '';
    };

    serverPort = mkOption {
      type = types.int;
      default = 25565;
    };
    queryPort = mkOption {
      type = types.nullOr types.int;
      default = cfg.serverPort;
    };
    rconPort = mkOption {
      type = types.nullOr types.int;
      default = null;
      example = 25575;
      description = "Setting this is not recommended as rcon is insecure. Prefer using local rcon through SSH if possible.";
    };

    extraUDPPorts = mkOption {
      type = types.listOf types.int;
      default = [];
      example = [ 24454 ];
      description = "Additional UDP ports required by plugins or the like";
    };

    extraTCPPorts = mkOption {
      type = types.listOf types.int;
      default = [];
      description = "Additional TCP ports required by plugins or the like";
    };

    version = mkOption {
      type = types.str;
      default = "1.18.2";
      description = "Version of the minecraft server to run.";
    };

    jvmOpts = mkOption {
      type = types.separatedString " ";
      default = "-Xmx2048M -Xms2048M";
      # Example options from https://minecraft.gamepedia.com/Tutorials/Server_startup_script
      example = "-Xmx2048M -Xms4092M -XX:+UseG1GC -XX:+CMSIncrementalPacing "
        + "-XX:+CMSClassUnloadingEnabled -XX:ParallelGCThreads=2 "
        + "-XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10";
      description = "JVM options for the Minecraft server.";
    };
  };

  config = mkIf cfg.enable {

    users.users.minecraft = {
      description     = "Minecraft server service user";
      home            = cfg.dataDir;
      createHome      = true;
      isSystemUser    = true;
      group           = "minecraft";
    };
    users.groups.minecraft = {};

    environment.etc = {
      "minecraft/eula.txt" = configFile "eula=${trivial.boolToString cfg.agreeToEULA}";
    };

    environment.systemPackages = [ (papermcPkg cfg.version) ];

    systemd.services.minecraft-server = {
      description   = "Minecraft Server";
      wantedBy      = [ "multi-user.target" ];
      after         = [ "network.target" ];
      serviceConfig = {
        ExecStart = "${(papermcPkg cfg.version)}/bin/minecraft-server ${cfg.jvmOpts}";
        Restart = "always";
        User = "minecraft";
        WorkingDirectory = cfg.dataDir;
      };

      preStart = ''
        ln -sf "/etc/minecraft/eula.txt" eula.txt
      '';
#     '' + (if cfg.declarative then ''
#       if [ -e .declarative ]; then
#         # Was declarative before, no need to back up anything
#         ln -sf ${whitelistFile} whitelist.json
#         cp -f ${serverPropertiesFile} server.properties
#       else
#         # Declarative for the first time, backup stateful files
#         ln -sb --suffix=.stateful ${whitelistFile} whitelist.json
#         cp -b --suffix=.stateful ${serverPropertiesFile} server.properties
#         # server.properties must have write permissions, because every time
#         # the server starts it first parses the file and then regenerates it..
#         chmod +w server.properties
#         echo "Autogenerated file that signifies that this server configuration is managed declaratively by NixOS" \
#           > .declarative
#       fi
#     '' else ''
#       if [ -e .declarative ]; then
#         rm .declarative
#       fi
#     '');
    };

    networking.firewall = mkIf cfg.openFirewall {
      allowedUDPPorts = [ cfg.serverPort ] ++ cfg.extraUDPPorts;
      allowedTCPPorts = [ cfg.serverPort ]
        ++ cfg.extraTCPPorts
        ++ optional (cfg.queryPort != null) cfg.queryPort
        ++ optional (cfg.rconPort != null) cfg.rconPort;
    };

    assertions = [
      { assertion = cfg.agreeToEULA;
        message = "You must agree to Mojangs EULA to run minecraft-server."
          + " Read https://account.mojang.com/documents/minecraft_eula and"
          + " set `services.minecraft-server.eula` to `true` if you agree.";
      }
    ];

  };
}
